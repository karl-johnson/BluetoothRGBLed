import os.path
import yaml
from datetime import datetime

YAMLPATH = "commonData.yaml"
CPP_OUTPUTPATH = "generated/testfile.h"

# to avoid destructive overwriting, move current version to a timestamped copy
if os.path.exists(CPP_OUTPUTPATH):
    output_split = CPP_OUTPUTPATH.split(".")
    if len(output_split) > 2:
        print("Too many dots in path!")
        exit()
    current_time = (datetime.now()).strftime("%Y%m%d%H%M%S")
    os.rename(CPP_OUTPUTPATH,output_split[0]+current_time+"."+output_split[1])
cpp_file = open(CPP_OUTPUTPATH, "x")
# hardcoded garbage - TODO make this better with file fragments?
cpp_file.writelines(["// *** GENERATED BY COMMON/GENERATEHEADERS.PY *** \n",
    "// Header file to store common communication information \n",
    "#include <Arduino.h> \n",
    "#ifndef GLOBAL_HEADER\n",
    "#define GLOBAL_HEADER\n",
    "#define MESSAGE_LENGTH 6\n",
    "#define MESSAGE_TIMEOUT_DURATION 10\n"])
cpp_file.write("#endif")
with open(YAMLPATH) as file:
    yaml_list = yaml.load(file, Loader = yaml.FullLoader)
    instruction_list = yaml_list['instructions']
    start_byte = yaml_list['start_byte']
for each_instruction in instruction_list:
    for key in each_instruction:
        print(key)
        print(each_instruction[key]['android_string'])
        print(each_instruction[key]['android_code'])
        print(each_instruction[key]['arduino_string'])
        print(each_instruction[key]['arduino_code'])
